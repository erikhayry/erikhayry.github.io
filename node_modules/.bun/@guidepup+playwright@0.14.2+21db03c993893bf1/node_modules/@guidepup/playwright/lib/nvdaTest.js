"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nvdaTest = void 0;
const test_1 = require("@playwright/test");
const guidepup_1 = require("@guidepup/guidepup");
const applicationNameMap_1 = require("./applicationNameMap");
const nvdaPlaywright = guidepup_1.nvda;
const MAX_APPLICATION_SWITCH_RETRY_COUNT = 10;
const SWITCH_APPLICATION = {
    keyCode: [guidepup_1.WindowsKeyCodes.Escape],
    modifiers: [guidepup_1.WindowsModifiers.Alt],
};
const MOVE_TO_TOP = {
    keyCode: [guidepup_1.WindowsKeyCodes.Home],
    modifiers: [guidepup_1.WindowsModifiers.Control],
};
const focusBrowser = async ({ applicationName, }) => {
    await nvdaPlaywright.perform(nvdaPlaywright.keyboardCommands.reportTitle);
    let windowTitle = await nvdaPlaywright.lastSpokenPhrase();
    if (windowTitle.includes(applicationName)) {
        return;
    }
    let applicationSwitchRetryCount = 0;
    while (applicationSwitchRetryCount < MAX_APPLICATION_SWITCH_RETRY_COUNT) {
        applicationSwitchRetryCount++;
        await nvdaPlaywright.perform(SWITCH_APPLICATION);
        await nvdaPlaywright.perform(nvdaPlaywright.keyboardCommands.reportTitle);
        windowTitle = await nvdaPlaywright.lastSpokenPhrase();
        if (windowTitle.includes(applicationName)) {
            break;
        }
    }
};
/**
 * These tests extend the default Playwright environment that launches the
 * browser with a running instance of the NVDA screen reader for Windows.
 *
 * A fresh started NVDA instance `nvda` is provided to each test.
 */
exports.nvdaTest = test_1.test.extend({
    nvdaStartOptions: {},
    nvda: async ({ browserName, page, nvdaStartOptions }, use) => {
        try {
            const applicationName = applicationNameMap_1.applicationNameMap[browserName];
            if (!applicationName) {
                throw new Error(`Browser ${browserName} is not installed.`);
            }
            await page.goto("about:blank", { waitUntil: "load" });
            await page.bringToFront();
            nvdaPlaywright.navigateToWebContent = async () => {
                // Make sure NVDA is not in focus mode.
                await nvdaPlaywright.perform(nvdaPlaywright.keyboardCommands.exitFocusMode);
                // Ensure application is brought to front and focused.
                await focusBrowser({ applicationName });
                // NVDA appears to not work well with Firefox when switching between
                // applications resulting in the entire browser window having NVDA focus
                // with focus mode.
                //
                // One workaround is to tab to the next focusable item. From there we can
                // toggle into (yes although we are already in it...) focus mode and back
                // out. In case this ever transpires to not happen as expect, we then ensure
                // we exit focus mode and move NVDA to the top of the page.
                //
                // REF: https://github.com/nvaccess/nvda/issues/5758
                await nvdaPlaywright.perform(nvdaPlaywright.keyboardCommands.readNextFocusableItem);
                await nvdaPlaywright.perform(nvdaPlaywright.keyboardCommands.toggleBetweenBrowseAndFocusMode);
                await nvdaPlaywright.perform(nvdaPlaywright.keyboardCommands.toggleBetweenBrowseAndFocusMode);
                await nvdaPlaywright.perform(nvdaPlaywright.keyboardCommands.exitFocusMode);
                await nvdaPlaywright.perform(MOVE_TO_TOP);
                // Clear out logs.
                await nvdaPlaywright.clearItemTextLog();
                await nvdaPlaywright.clearSpokenPhraseLog();
            };
            await nvdaPlaywright.start(nvdaStartOptions);
            await use(nvdaPlaywright);
        }
        finally {
            try {
                await nvdaPlaywright.stop();
            }
            catch {
                // swallow stop failure
            }
        }
    },
});
